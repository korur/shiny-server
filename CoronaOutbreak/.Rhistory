#' @param df Sheet.
#'
#' @keywords internal
rename_sheets <- function(df){
names(df)[1:4] <- c(
"state",
"country",
"lat",
"lon"
)
return(df)
}
#' Pivot
#'
#' Change data from wide to long.
#'
#' @param df Sheet.
#'
#' @keywords internal
pivot <- function(df){
tidyr::pivot_longer(
df,
tidyselect::contains("/"),
names_to = c("date"),
values_to = c("cases"),
values_ptypes = list(cases = "character")
)
}
#' Convert
#'
#' Convert dates.
#'
#' @keywords internal
as_date <- function(date){
date <- lubridate::mdy(date, "%m/%d/%Y")
date[!is.na(date)]
}
# jhu data
confirmed_sheet <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
deaths_sheet <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
# confirmed cases
confirmed <- readr::read_csv(confirmed_sheet, col_types = readr::cols())
# deaths
deaths <- readr::read_csv(deaths_sheet, col_types = readr::cols())
# add col
confirmed$type <- "confirmed"
deaths$type <- "death"
# rename
confirmed <- rename_sheets(confirmed)
deaths <- rename_sheets(deaths)
# pivot longer
confirmed <- pivot(confirmed)
packageVersion("tidyr")
install.packages("tidyr")
packageVersion("tidyr")
# libraries needed
library(tidyverse)
# Functions needed
#Rename
#'
#' Rename first few columns
#'
#' @param df Sheet.
#'
#' @keywords internal
rename_sheets <- function(df){
names(df)[1:4] <- c(
"state",
"country",
"lat",
"lon"
)
return(df)
}
#' Pivot
#'
#' Change data from wide to long.
#'
#' @param df Sheet.
#'
#' @keywords internal
pivot <- function(df){
tidyr::pivot_longer(
df,
tidyselect::contains("/"),
names_to = c("date"),
values_to = c("cases"),
values_ptypes = list(cases = "character")
)
}
#' Convert
#'
#' Convert dates.
#'
#' @keywords internal
as_date <- function(date){
date <- lubridate::mdy(date, "%m/%d/%Y")
date[!is.na(date)]
}
# jhu data
confirmed_sheet <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
deaths_sheet <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
# confirmed cases
confirmed <- readr::read_csv(confirmed_sheet, col_types = readr::cols())
# deaths
deaths <- readr::read_csv(deaths_sheet, col_types = readr::cols())
# add col
confirmed$type <- "confirmed"
deaths$type <- "death"
# rename
confirmed <- rename_sheets(confirmed)
deaths <- rename_sheets(deaths)
# pivot longer
confirmed <- pivot(confirmed)
pivot <- function(df){
tidyr::pivot_longer(
df,
tidyselect::contains("/"),
names_to = c("date"),
values_to = c("cases")
)
}
confirmed1 <- pivot(confirmed)
dim(confirmed)
pivot
pivot <- function(df){
tidyr::pivot_longer(
df,
tidyselect::contains("/"),
names_to = c("date"),
values_to = c("cases"),
values_ptypes = list(cases = "numeric")
)
}
confirmed1 <- pivot(confirmed)
pivot <- function(df){
tidyr::pivot_longer(
df,
tidyselect::contains("/"),
names_to = c("date"),
values_to = c("cases")
)
}
confirmed <- readr::read_csv(confirmed_sheet, col_types = readr::cols())
# deaths
deaths <- readr::read_csv(deaths_sheet, col_types = readr::cols())
# add col
confirmed$type <- "confirmed"
deaths$type <- "death"
confirmed <- rename_sheets(confirmed)
dim(confirmed)
confirmed <- pivot(confirmed)
dim(confirmed)
names(confirmed)
head(confirmed)
head(df)
deaths <- pivot(deaths)
pivot
deaths <- readr::read_csv(deaths_sheet, col_types = readr::cols())
deaths <- rename_sheets(deaths
)
deaths <- pivot(deaths)
dim(deaths)
head(deaths)
con <- pool::dbPool(
RPostgres::Postgres(),
host = config$database$host,
user = config$database$user,
password = config$database$password,
dbname = config$database$name,
port = 25060)
# Save to database
log <- tibble::tibble(last_updated = Sys.time())
DBI::dbWriteTable(con, "jhu", df, overwrite =TRUE, append = FALSE)
DBI::dbWriteTable(con, "log", log, append = TRUE)
head(df)
dftest <- df
head(dftest)
# libraries needed
library(tidyverse)
# Functions needed
#Rename
#'
#' Rename first few columns
#'
#' @param df Sheet.
#'
#' @keywords internal
rename_sheets <- function(df){
names(df)[1:4] <- c(
"state",
"country",
"lat",
"lon"
)
return(df)
}
#' Pivot
#'
#' Change data from wide to long.
#'
#' @param df Sheet.
#'
#' @keywords internal
pivot <- function(df){
tidyr::pivot_longer(
df,
tidyselect::contains("/"),
names_to = c("date"),
values_to = c("cases"),
values_ptypes = list(cases = "character")
)
}
#' Convert
#'
#' Convert dates.
#'
#' @keywords internal
as_date <- function(date){
date <- lubridate::mdy(date, "%m/%d/%Y")
date[!is.na(date)]
}
# jhu data
confirmed_sheet <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
deaths_sheet <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
# confirmed cases
confirmed <- readr::read_csv(confirmed_sheet, col_types = readr::cols())
# deaths
deaths <- readr::read_csv(deaths_sheet, col_types = readr::cols())
# add col
confirmed$type <- "confirmed"
deaths$type <- "death"
# rename
confirmed <- rename_sheets(confirmed)
deaths <- rename_sheets(deaths)
# pivot longer
confirmed <- pivot(confirmed)
deaths <- pivot(deaths)
suppressWarnings({
df <- dplyr::bind_rows(confirmed, deaths) %>%
dplyr::mutate(
date = as_date(date),
cases = trimws(cases),
cases = as.numeric(cases),
cases = dplyr::case_when(
is.na(cases) ~ 0,
TRUE ~ cases
),
country_iso2c = countrycode::countrycode(country, "country.name", "iso2c")
)
})
df$state <- ifelse(is.na(df$state), df$country,df$state)
# libraries needed
library(tidyverse)
# Functions needed
#Rename
#'
#' Rename first few columns
#'
#' @param df Sheet.
#'
#' @keywords internal
rename_sheets <- function(df){
names(df)[1:4] <- c(
"state",
"country",
"lat",
"lon"
)
return(df)
}
#' Pivot
#'
#' Change data from wide to long.
#'
#' @param df Sheet.
#'
#' @keywords internal
pivot <- function(df){
tidyr::pivot_longer(
df,
tidyselect::contains("/"),
names_to = c("date"),
values_to = c("cases")
)
}
#' Convert
#'
#' Convert dates.
#'
#' @keywords internal
as_date <- function(date){
date <- lubridate::mdy(date, "%m/%d/%Y")
date[!is.na(date)]
}
# jhu data
confirmed_sheet <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
deaths_sheet <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
# confirmed cases
confirmed <- readr::read_csv(confirmed_sheet, col_types = readr::cols())
# deaths
deaths <- readr::read_csv(deaths_sheet, col_types = readr::cols())
# add col
confirmed$type <- "confirmed"
deaths$type <- "death"
# rename
confirmed <- rename_sheets(confirmed)
deaths <- rename_sheets(deaths)
# pivot longer
confirmed <- pivot(confirmed)
deaths <- pivot(deaths)
suppressWarnings({
df <- dplyr::bind_rows(confirmed, deaths) %>%
dplyr::mutate(
date = as_date(date),
cases = trimws(cases),
cases = as.numeric(cases),
cases = dplyr::case_when(
is.na(cases) ~ 0,
TRUE ~ cases
),
country_iso2c = countrycode::countrycode(country, "country.name", "iso2c")
)
})
df$state <- ifelse(is.na(df$state), df$country,df$state)
head(df)
head(dftest)
dim(df)
dim(dftest)
# libraries needed
library(tidyverse)
# Functions needed
#Rename
#'
#' Rename first few columns
#'
#' @param df Sheet.
#'
#' @keywords internal
rename_sheets <- function(df){
names(df)[1:4] <- c(
"state",
"country",
"lat",
"lon"
)
return(df)
}
#' Pivot
#'
#' Change data from wide to long.
#'
#' @param df Sheet.
#'
#' @keywords internal
pivot <- function(df){
tidyr::pivot_longer(
df,
tidyselect::contains("/"),
names_to = c("date"),
values_to = c("cases")
)
}
#' Convert
#'
#' Convert dates.
#'
#' @keywords internal
as_date <- function(date){
date <- lubridate::mdy(date, "%m/%d/%Y")
date[!is.na(date)]
}
# jhu data
confirmed_sheet <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
deaths_sheet <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
# confirmed cases
confirmed <- readr::read_csv(confirmed_sheet, col_types = readr::cols())
# deaths
deaths <- readr::read_csv(deaths_sheet, col_types = readr::cols())
# add col
confirmed$type <- "confirmed"
deaths$type <- "death"
# rename
confirmed <- rename_sheets(confirmed)
deaths <- rename_sheets(deaths)
# pivot longer
confirmed <- pivot(confirmed)
deaths <- pivot(deaths)
suppressWarnings({
df <- dplyr::bind_rows(confirmed, deaths) %>%
dplyr::mutate(
date = as_date(date),
cases = trimws(cases),
cases = as.numeric(cases),
cases = dplyr::case_when(
is.na(cases) ~ 0,
TRUE ~ cases
),
country_iso2c = countrycode::countrycode(country, "country.name", "iso2c")
)
})
df$state <- ifelse(is.na(df$state), df$country,df$state)
con <- pool::dbPool(
RPostgres::Postgres(),
host = config$database$host,
user = config$database$user,
password = config$database$password,
dbname = config$database$name,
port = 25060)
# Save to database
log <- tibble::tibble(last_updated = Sys.time())
DBI::dbWriteTable(con, "jhu", df, overwrite =TRUE, append = FALSE)
DBI::dbWriteTable(con, "log", log, append = TRUE)
log
packageVersion("vctrs")
library(RSQLite)
con <- dbConnect(SQLite(), "/srv/shiny-server/covid.db")
log <- DBI::dbGetQuery(con, "SELECT MAX(last_updated) FROM log;")
log
log <- DBI::dbGetQuery(con, "SELECT * FROM log;")
log
log <- DBI::dbGetQuery(con, "SELECT MAX(last_updated) as max FROM log;")
diff <- difftime(as.POSIXct(Sys.time(), origin="1970-01-01"), as.POSIXct(log$max, origin="1970-01-01"), units = "min")
diff
log <- DBI::dbGetQuery(con, "SELECT MAX(last_updated) as max FROM log;")
diff <- difftime(as.POSIXct(Sys.time(),log$max, units = "min")
diff <- difftime(as.POSIXct(Sys.time(),log$max, units = "min")
diff <- difftime(as.POSIXct(Sys.time(),log$max, units = "min")
q
diff <- difftime(Sys.time(),log$max,  units = "min")
diff <- difftime(Sys.time(),log$max,  units = "mins")
q()
list.files()
library(shiny)
library(shinydashboard)
library(tidyverse)
library(leaflet)
library(DT)
library(countup)
library(waiter)
library(DBI)
library(pool)
library(golem)
library(RSQLite)
# for local
con <- dbConnect(SQLite(), "covid.db")
con
ASIA <- c("Hong Kong","Japan", "Macau", "China", "Singapore ", "South Korea", "Taiwan", "Thailand", "Vietnam", "United Arab Emirates", "Cambodia", "Sri Lanka","India", "Nepal", "Russia",
"Philippines", "Hong Kong", "Malaysia", "Macau", "Tibet", "Iran")
America <- c("US", "Canada", "United States of America")
EU <- c("France", "UK", "Germany", "Italy",
"Finland", "Sweden", "Spain" , "Norway", "Belgium",
"Greece", "Switzerland", "Austria", "Portugal",
"Turkey", "Poland", "Croatia", "United Kingdom", "Estonia", "Belarus",
"Monaco", "North Macedonia", "San Marino", "Iceland", "Lithuania",
"Romania", "Hungary", "Netherlands", "Serbia,", "Czechia", "Ireland", "Slovenia")
runApp()
runApp()
con
getwd()
df <- DBI::dbReadTable(con, "jhu")
jhu
df
df$date
as.date(18622)
as.Date(41375, origin = "1899-12-30")
as.Date(18631, origin = "1899-12-30")
as.Date(18631, tz='CET')
as.Date(41375, origin = "1970-01-01")
as.Date(18622, origin = "1970-01-01")
df$date[-1]
df$date[-1]
df$date.tail(1)
df$date.tail()
tail(df$date)
df$date[length(df)]
df$date[nrow(df)]
as.POSIXct(18933, origin="1970-01-01")
log <- DBI::dbGetQuery(con, "SELECT MAX(last_updated) FROM log;")},
log <- DBI::dbGetQuery(con, "SELECT MAX(last_updated) FROM log;")}
log <- DBI::dbGetQuery(con, "SELECT MAX(last_updated) FROM log;")
log
runApp()
as.Date(date, origin = "1970-01-01")
getwd
getwd()
runApp()
runApp()
runApp()
runApp()
as.Date(22000, origin = "1970-01-01")
as.Date(17000, origin = "1970-01-01")
as.Date(17800, origin = "1970-01-01")
as.Date(18400, origin = "1970-01-01")
as.Date(18600, origin = "1970-01-01")
as.Date(18627, origin = "1970-01-01")
runApp()
class(df$date)
df$date
runApp()
runApp()
runApp()
df <- DBI::dbReadTable(con, "jhu")
df
df$date = as.Date(df$date, origin="1970-01-01")
df$date
runApp()
df$date
max(df$date)
runApp()
runApp()
runApp('D:/dwdir/shiny/shinytestapp')
